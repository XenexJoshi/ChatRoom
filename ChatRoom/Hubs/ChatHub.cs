using System.Net.WebSockets;
using Microsoft.AspNetCore.SignalR;

namespace ChatRoom.Hubs;

/* [ChatHub] contains all methods that enable the frontend clients to send and
receive methods among each other, and keep track of new connections and connection
breaks within the clients.
*/
public class ChatHub : Hub
{
  /* [clients] keeps track of the frontend clients connected to the server to keep
  track of the different clients joining and exiting the chatroom.
  */
  private static Dictionary<string, string> clients = new Dictionary<string, string>();

  /* [JoinTask(user, message)] connects the client [user] to the server, and sends
  an initial message [message] to all existing clients connecting to the server
  informing the new connection.
  */
  public async Task JoinChat(string user, string message)
  {
    clients[Context.ConnectionId] = user;
    await Clients.Others.SendAsync("ReceiveMessage", user, message);
  }

  /* [SendMessage(user, message)] transmits the message [message] generated by
  the user [user] onto all connected clients, including the sender, and notifies
  the clients. [SendMessage()] method is invoked when a client has to send a 
  message, and [ReceiveMessage()] method is invoked when a client has to receive
  a message.
  */
  public async Task SendMessage(string user, string message)
  {
    await Clients.All.SendAsync("ReceiveMessage", user, message);
  }

  /* [ExitChat] detects a diconnection of the client from the server and sends
  a curated message to all remaining clients indicating that a user has disconnected
  from the server.
  */
  private async Task ExitChat()
  {
    if (clients.TryGetValue(Context.ConnectionId, out string user))
    {
      var message = $"{user} has left the chat.";
      await Clients.Others.SendAsync("ReceiveMessage", user, message);
    }
  }

  /* [OnDisconnectedAsync] calls upon the method [ExitChat] to notify all existing
  users that a client has left the server. The method is invoked whenever a client
  disconnects from the server.
  */
  public override async Task OnDisconnectedAsync(Exception? exception)
  {
    await ExitChat();
    await base.OnDisconnectedAsync(exception);
  }
}